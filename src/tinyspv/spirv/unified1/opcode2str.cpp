// THIS IS A GENERATED SOURCE. MODIFICATION WILL BE OVERWRITTEN.
// USING JSON FROM:
//   PENGUINLIONG/tinyspv @ c43e82bfb70d813a08d7d10bb8a7a702a0798101
#include "tinyspv/spirv/unified1/opcode2str.hpp"
namespace tinyspv {
const char* opcode2str(int opcode) {
  switch (opcode) {
  case Op::OpNop: return "Nop";
  case Op::OpUndef: return "Undef";
  case Op::OpSizeOf: return "SizeOf";
  case Op::OpSourceContinued: return "SourceContinued";
  case Op::OpSource: return "Source";
  case Op::OpSourceExtension: return "SourceExtension";
  case Op::OpName: return "Name";
  case Op::OpMemberName: return "MemberName";
  case Op::OpString: return "String";
  case Op::OpLine: return "Line";
  case Op::OpNoLine: return "NoLine";
  case Op::OpModuleProcessed: return "ModuleProcessed";
  case Op::OpDecorate: return "Decorate";
  case Op::OpMemberDecorate: return "MemberDecorate";
  case Op::OpDecorationGroup: return "DecorationGroup";
  case Op::OpGroupDecorate: return "GroupDecorate";
  case Op::OpGroupMemberDecorate: return "GroupMemberDecorate";
  case Op::OpDecorateId: return "DecorateId";
  case Op::OpDecorateString: return "DecorateString";
  case Op::OpMemberDecorateString: return "MemberDecorateString";
  case Op::OpExtension: return "Extension";
  case Op::OpExtInstImport: return "ExtInstImport";
  case Op::OpExtInst: return "ExtInst";
  case Op::OpMemoryModel: return "MemoryModel";
  case Op::OpEntryPoint: return "EntryPoint";
  case Op::OpExecutionMode: return "ExecutionMode";
  case Op::OpCapability: return "Capability";
  case Op::OpExecutionModeId: return "ExecutionModeId";
  case Op::OpTypeVoid: return "TypeVoid";
  case Op::OpTypeBool: return "TypeBool";
  case Op::OpTypeInt: return "TypeInt";
  case Op::OpTypeFloat: return "TypeFloat";
  case Op::OpTypeVector: return "TypeVector";
  case Op::OpTypeMatrix: return "TypeMatrix";
  case Op::OpTypeImage: return "TypeImage";
  case Op::OpTypeSampler: return "TypeSampler";
  case Op::OpTypeSampledImage: return "TypeSampledImage";
  case Op::OpTypeArray: return "TypeArray";
  case Op::OpTypeRuntimeArray: return "TypeRuntimeArray";
  case Op::OpTypeStruct: return "TypeStruct";
  case Op::OpTypeOpaque: return "TypeOpaque";
  case Op::OpTypePointer: return "TypePointer";
  case Op::OpTypeFunction: return "TypeFunction";
  case Op::OpTypeEvent: return "TypeEvent";
  case Op::OpTypeDeviceEvent: return "TypeDeviceEvent";
  case Op::OpTypeReserveId: return "TypeReserveId";
  case Op::OpTypeQueue: return "TypeQueue";
  case Op::OpTypePipe: return "TypePipe";
  case Op::OpTypeForwardPointer: return "TypeForwardPointer";
  case Op::OpTypePipeStorage: return "TypePipeStorage";
  case Op::OpTypeNamedBarrier: return "TypeNamedBarrier";
  case Op::OpConstantTrue: return "ConstantTrue";
  case Op::OpConstantFalse: return "ConstantFalse";
  case Op::OpConstant: return "Constant";
  case Op::OpConstantComposite: return "ConstantComposite";
  case Op::OpConstantSampler: return "ConstantSampler";
  case Op::OpConstantNull: return "ConstantNull";
  case Op::OpSpecConstantTrue: return "SpecConstantTrue";
  case Op::OpSpecConstantFalse: return "SpecConstantFalse";
  case Op::OpSpecConstant: return "SpecConstant";
  case Op::OpSpecConstantComposite: return "SpecConstantComposite";
  case Op::OpSpecConstantOp: return "SpecConstantOp";
  case Op::OpVariable: return "Variable";
  case Op::OpImageTexelPointer: return "ImageTexelPointer";
  case Op::OpLoad: return "Load";
  case Op::OpStore: return "Store";
  case Op::OpCopyMemory: return "CopyMemory";
  case Op::OpCopyMemorySized: return "CopyMemorySized";
  case Op::OpAccessChain: return "AccessChain";
  case Op::OpInBoundsAccessChain: return "InBoundsAccessChain";
  case Op::OpPtrAccessChain: return "PtrAccessChain";
  case Op::OpArrayLength: return "ArrayLength";
  case Op::OpGenericPtrMemSemantics: return "GenericPtrMemSemantics";
  case Op::OpInBoundsPtrAccessChain: return "InBoundsPtrAccessChain";
  case Op::OpPtrEqual: return "PtrEqual";
  case Op::OpPtrNotEqual: return "PtrNotEqual";
  case Op::OpPtrDiff: return "PtrDiff";
  case Op::OpFunction: return "Function";
  case Op::OpFunctionParameter: return "FunctionParameter";
  case Op::OpFunctionEnd: return "FunctionEnd";
  case Op::OpFunctionCall: return "FunctionCall";
  case Op::OpSampledImage: return "SampledImage";
  case Op::OpImageSampleImplicitLod: return "ImageSampleImplicitLod";
  case Op::OpImageSampleExplicitLod: return "ImageSampleExplicitLod";
  case Op::OpImageSampleDrefImplicitLod: return "ImageSampleDrefImplicitLod";
  case Op::OpImageSampleDrefExplicitLod: return "ImageSampleDrefExplicitLod";
  case Op::OpImageSampleProjImplicitLod: return "ImageSampleProjImplicitLod";
  case Op::OpImageSampleProjExplicitLod: return "ImageSampleProjExplicitLod";
  case Op::OpImageSampleProjDrefImplicitLod: return "ImageSampleProjDrefImplicitLod";
  case Op::OpImageSampleProjDrefExplicitLod: return "ImageSampleProjDrefExplicitLod";
  case Op::OpImageFetch: return "ImageFetch";
  case Op::OpImageGather: return "ImageGather";
  case Op::OpImageDrefGather: return "ImageDrefGather";
  case Op::OpImageRead: return "ImageRead";
  case Op::OpImageWrite: return "ImageWrite";
  case Op::OpImage: return "Image";
  case Op::OpImageQueryFormat: return "ImageQueryFormat";
  case Op::OpImageQueryOrder: return "ImageQueryOrder";
  case Op::OpImageQuerySizeLod: return "ImageQuerySizeLod";
  case Op::OpImageQuerySize: return "ImageQuerySize";
  case Op::OpImageQueryLod: return "ImageQueryLod";
  case Op::OpImageQueryLevels: return "ImageQueryLevels";
  case Op::OpImageQuerySamples: return "ImageQuerySamples";
  case Op::OpImageSparseSampleImplicitLod: return "ImageSparseSampleImplicitLod";
  case Op::OpImageSparseSampleExplicitLod: return "ImageSparseSampleExplicitLod";
  case Op::OpImageSparseSampleDrefImplicitLod: return "ImageSparseSampleDrefImplicitLod";
  case Op::OpImageSparseSampleDrefExplicitLod: return "ImageSparseSampleDrefExplicitLod";
  case Op::OpImageSparseSampleProjImplicitLod: return "ImageSparseSampleProjImplicitLod";
  case Op::OpImageSparseSampleProjExplicitLod: return "ImageSparseSampleProjExplicitLod";
  case Op::OpImageSparseSampleProjDrefImplicitLod: return "ImageSparseSampleProjDrefImplicitLod";
  case Op::OpImageSparseSampleProjDrefExplicitLod: return "ImageSparseSampleProjDrefExplicitLod";
  case Op::OpImageSparseFetch: return "ImageSparseFetch";
  case Op::OpImageSparseGather: return "ImageSparseGather";
  case Op::OpImageSparseDrefGather: return "ImageSparseDrefGather";
  case Op::OpImageSparseTexelsResident: return "ImageSparseTexelsResident";
  case Op::OpImageSparseRead: return "ImageSparseRead";
  case Op::OpImageSampleFootprintNV: return "ImageSampleFootprintNV";
  case Op::OpConvertFToU: return "ConvertFToU";
  case Op::OpConvertFToS: return "ConvertFToS";
  case Op::OpConvertSToF: return "ConvertSToF";
  case Op::OpConvertUToF: return "ConvertUToF";
  case Op::OpUConvert: return "UConvert";
  case Op::OpSConvert: return "SConvert";
  case Op::OpFConvert: return "FConvert";
  case Op::OpQuantizeToF16: return "QuantizeToF16";
  case Op::OpConvertPtrToU: return "ConvertPtrToU";
  case Op::OpSatConvertSToU: return "SatConvertSToU";
  case Op::OpSatConvertUToS: return "SatConvertUToS";
  case Op::OpConvertUToPtr: return "ConvertUToPtr";
  case Op::OpPtrCastToGeneric: return "PtrCastToGeneric";
  case Op::OpGenericCastToPtr: return "GenericCastToPtr";
  case Op::OpGenericCastToPtrExplicit: return "GenericCastToPtrExplicit";
  case Op::OpBitcast: return "Bitcast";
  case Op::OpVectorExtractDynamic: return "VectorExtractDynamic";
  case Op::OpVectorInsertDynamic: return "VectorInsertDynamic";
  case Op::OpVectorShuffle: return "VectorShuffle";
  case Op::OpCompositeConstruct: return "CompositeConstruct";
  case Op::OpCompositeExtract: return "CompositeExtract";
  case Op::OpCompositeInsert: return "CompositeInsert";
  case Op::OpCopyObject: return "CopyObject";
  case Op::OpTranspose: return "Transpose";
  case Op::OpCopyLogical: return "CopyLogical";
  case Op::OpSNegate: return "SNegate";
  case Op::OpFNegate: return "FNegate";
  case Op::OpIAdd: return "IAdd";
  case Op::OpFAdd: return "FAdd";
  case Op::OpISub: return "ISub";
  case Op::OpFSub: return "FSub";
  case Op::OpIMul: return "IMul";
  case Op::OpFMul: return "FMul";
  case Op::OpUDiv: return "UDiv";
  case Op::OpSDiv: return "SDiv";
  case Op::OpFDiv: return "FDiv";
  case Op::OpUMod: return "UMod";
  case Op::OpSRem: return "SRem";
  case Op::OpSMod: return "SMod";
  case Op::OpFRem: return "FRem";
  case Op::OpFMod: return "FMod";
  case Op::OpVectorTimesScalar: return "VectorTimesScalar";
  case Op::OpMatrixTimesScalar: return "MatrixTimesScalar";
  case Op::OpVectorTimesMatrix: return "VectorTimesMatrix";
  case Op::OpMatrixTimesVector: return "MatrixTimesVector";
  case Op::OpMatrixTimesMatrix: return "MatrixTimesMatrix";
  case Op::OpOuterProduct: return "OuterProduct";
  case Op::OpDot: return "Dot";
  case Op::OpIAddCarry: return "IAddCarry";
  case Op::OpISubBorrow: return "ISubBorrow";
  case Op::OpUMulExtended: return "UMulExtended";
  case Op::OpSMulExtended: return "SMulExtended";
  case Op::OpShiftRightLogical: return "ShiftRightLogical";
  case Op::OpShiftRightArithmetic: return "ShiftRightArithmetic";
  case Op::OpShiftLeftLogical: return "ShiftLeftLogical";
  case Op::OpBitwiseOr: return "BitwiseOr";
  case Op::OpBitwiseXor: return "BitwiseXor";
  case Op::OpBitwiseAnd: return "BitwiseAnd";
  case Op::OpNot: return "Not";
  case Op::OpBitFieldInsert: return "BitFieldInsert";
  case Op::OpBitFieldSExtract: return "BitFieldSExtract";
  case Op::OpBitFieldUExtract: return "BitFieldUExtract";
  case Op::OpBitReverse: return "BitReverse";
  case Op::OpBitCount: return "BitCount";
  case Op::OpAny: return "Any";
  case Op::OpAll: return "All";
  case Op::OpIsNan: return "IsNan";
  case Op::OpIsInf: return "IsInf";
  case Op::OpIsFinite: return "IsFinite";
  case Op::OpIsNormal: return "IsNormal";
  case Op::OpSignBitSet: return "SignBitSet";
  case Op::OpLessOrGreater: return "LessOrGreater";
  case Op::OpOrdered: return "Ordered";
  case Op::OpUnordered: return "Unordered";
  case Op::OpLogicalEqual: return "LogicalEqual";
  case Op::OpLogicalNotEqual: return "LogicalNotEqual";
  case Op::OpLogicalOr: return "LogicalOr";
  case Op::OpLogicalAnd: return "LogicalAnd";
  case Op::OpLogicalNot: return "LogicalNot";
  case Op::OpSelect: return "Select";
  case Op::OpIEqual: return "IEqual";
  case Op::OpINotEqual: return "INotEqual";
  case Op::OpUGreaterThan: return "UGreaterThan";
  case Op::OpSGreaterThan: return "SGreaterThan";
  case Op::OpUGreaterThanEqual: return "UGreaterThanEqual";
  case Op::OpSGreaterThanEqual: return "SGreaterThanEqual";
  case Op::OpULessThan: return "ULessThan";
  case Op::OpSLessThan: return "SLessThan";
  case Op::OpULessThanEqual: return "ULessThanEqual";
  case Op::OpSLessThanEqual: return "SLessThanEqual";
  case Op::OpFOrdEqual: return "FOrdEqual";
  case Op::OpFUnordEqual: return "FUnordEqual";
  case Op::OpFOrdNotEqual: return "FOrdNotEqual";
  case Op::OpFUnordNotEqual: return "FUnordNotEqual";
  case Op::OpFOrdLessThan: return "FOrdLessThan";
  case Op::OpFUnordLessThan: return "FUnordLessThan";
  case Op::OpFOrdGreaterThan: return "FOrdGreaterThan";
  case Op::OpFUnordGreaterThan: return "FUnordGreaterThan";
  case Op::OpFOrdLessThanEqual: return "FOrdLessThanEqual";
  case Op::OpFUnordLessThanEqual: return "FUnordLessThanEqual";
  case Op::OpFOrdGreaterThanEqual: return "FOrdGreaterThanEqual";
  case Op::OpFUnordGreaterThanEqual: return "FUnordGreaterThanEqual";
  case Op::OpDPdx: return "DPdx";
  case Op::OpDPdy: return "DPdy";
  case Op::OpFwidth: return "Fwidth";
  case Op::OpDPdxFine: return "DPdxFine";
  case Op::OpDPdyFine: return "DPdyFine";
  case Op::OpFwidthFine: return "FwidthFine";
  case Op::OpDPdxCoarse: return "DPdxCoarse";
  case Op::OpDPdyCoarse: return "DPdyCoarse";
  case Op::OpFwidthCoarse: return "FwidthCoarse";
  case Op::OpPhi: return "Phi";
  case Op::OpLoopMerge: return "LoopMerge";
  case Op::OpSelectionMerge: return "SelectionMerge";
  case Op::OpLabel: return "Label";
  case Op::OpBranch: return "Branch";
  case Op::OpBranchConditional: return "BranchConditional";
  case Op::OpSwitch: return "Switch";
  case Op::OpKill: return "Kill";
  case Op::OpReturn: return "Return";
  case Op::OpReturnValue: return "ReturnValue";
  case Op::OpUnreachable: return "Unreachable";
  case Op::OpLifetimeStart: return "LifetimeStart";
  case Op::OpLifetimeStop: return "LifetimeStop";
  case Op::OpTerminateInvocation: return "TerminateInvocation";
  case Op::OpAtomicLoad: return "AtomicLoad";
  case Op::OpAtomicStore: return "AtomicStore";
  case Op::OpAtomicExchange: return "AtomicExchange";
  case Op::OpAtomicCompareExchange: return "AtomicCompareExchange";
  case Op::OpAtomicCompareExchangeWeak: return "AtomicCompareExchangeWeak";
  case Op::OpAtomicIIncrement: return "AtomicIIncrement";
  case Op::OpAtomicIDecrement: return "AtomicIDecrement";
  case Op::OpAtomicIAdd: return "AtomicIAdd";
  case Op::OpAtomicISub: return "AtomicISub";
  case Op::OpAtomicSMin: return "AtomicSMin";
  case Op::OpAtomicUMin: return "AtomicUMin";
  case Op::OpAtomicSMax: return "AtomicSMax";
  case Op::OpAtomicUMax: return "AtomicUMax";
  case Op::OpAtomicAnd: return "AtomicAnd";
  case Op::OpAtomicOr: return "AtomicOr";
  case Op::OpAtomicXor: return "AtomicXor";
  case Op::OpAtomicFlagTestAndSet: return "AtomicFlagTestAndSet";
  case Op::OpAtomicFlagClear: return "AtomicFlagClear";
  case Op::OpAtomicFAddEXT: return "AtomicFAddEXT";
  case Op::OpEmitVertex: return "EmitVertex";
  case Op::OpEndPrimitive: return "EndPrimitive";
  case Op::OpEmitStreamVertex: return "EmitStreamVertex";
  case Op::OpEndStreamPrimitive: return "EndStreamPrimitive";
  case Op::OpControlBarrier: return "ControlBarrier";
  case Op::OpMemoryBarrier: return "MemoryBarrier";
  case Op::OpNamedBarrierInitialize: return "NamedBarrierInitialize";
  case Op::OpMemoryNamedBarrier: return "MemoryNamedBarrier";
  case Op::OpGroupAsyncCopy: return "GroupAsyncCopy";
  case Op::OpGroupWaitEvents: return "GroupWaitEvents";
  case Op::OpGroupAll: return "GroupAll";
  case Op::OpGroupAny: return "GroupAny";
  case Op::OpGroupBroadcast: return "GroupBroadcast";
  case Op::OpGroupIAdd: return "GroupIAdd";
  case Op::OpGroupFAdd: return "GroupFAdd";
  case Op::OpGroupFMin: return "GroupFMin";
  case Op::OpGroupUMin: return "GroupUMin";
  case Op::OpGroupSMin: return "GroupSMin";
  case Op::OpGroupFMax: return "GroupFMax";
  case Op::OpGroupUMax: return "GroupUMax";
  case Op::OpGroupSMax: return "GroupSMax";
  case Op::OpSubgroupBallotKHR: return "SubgroupBallotKHR";
  case Op::OpSubgroupFirstInvocationKHR: return "SubgroupFirstInvocationKHR";
  case Op::OpSubgroupAllKHR: return "SubgroupAllKHR";
  case Op::OpSubgroupAnyKHR: return "SubgroupAnyKHR";
  case Op::OpSubgroupAllEqualKHR: return "SubgroupAllEqualKHR";
  case Op::OpSubgroupReadInvocationKHR: return "SubgroupReadInvocationKHR";
  case Op::OpGroupIAddNonUniformAMD: return "GroupIAddNonUniformAMD";
  case Op::OpGroupFAddNonUniformAMD: return "GroupFAddNonUniformAMD";
  case Op::OpGroupFMinNonUniformAMD: return "GroupFMinNonUniformAMD";
  case Op::OpGroupUMinNonUniformAMD: return "GroupUMinNonUniformAMD";
  case Op::OpGroupSMinNonUniformAMD: return "GroupSMinNonUniformAMD";
  case Op::OpGroupFMaxNonUniformAMD: return "GroupFMaxNonUniformAMD";
  case Op::OpGroupUMaxNonUniformAMD: return "GroupUMaxNonUniformAMD";
  case Op::OpGroupSMaxNonUniformAMD: return "GroupSMaxNonUniformAMD";
  case Op::OpSubgroupShuffleINTEL: return "SubgroupShuffleINTEL";
  case Op::OpSubgroupShuffleDownINTEL: return "SubgroupShuffleDownINTEL";
  case Op::OpSubgroupShuffleUpINTEL: return "SubgroupShuffleUpINTEL";
  case Op::OpSubgroupShuffleXorINTEL: return "SubgroupShuffleXorINTEL";
  case Op::OpSubgroupBlockReadINTEL: return "SubgroupBlockReadINTEL";
  case Op::OpSubgroupBlockWriteINTEL: return "SubgroupBlockWriteINTEL";
  case Op::OpSubgroupImageBlockReadINTEL: return "SubgroupImageBlockReadINTEL";
  case Op::OpSubgroupImageBlockWriteINTEL: return "SubgroupImageBlockWriteINTEL";
  case Op::OpSubgroupImageMediaBlockReadINTEL: return "SubgroupImageMediaBlockReadINTEL";
  case Op::OpSubgroupImageMediaBlockWriteINTEL: return "SubgroupImageMediaBlockWriteINTEL";
  case Op::OpEnqueueMarker: return "EnqueueMarker";
  case Op::OpEnqueueKernel: return "EnqueueKernel";
  case Op::OpGetKernelNDrangeSubGroupCount: return "GetKernelNDrangeSubGroupCount";
  case Op::OpGetKernelNDrangeMaxSubGroupSize: return "GetKernelNDrangeMaxSubGroupSize";
  case Op::OpGetKernelWorkGroupSize: return "GetKernelWorkGroupSize";
  case Op::OpGetKernelPreferredWorkGroupSizeMultiple: return "GetKernelPreferredWorkGroupSizeMultiple";
  case Op::OpRetainEvent: return "RetainEvent";
  case Op::OpReleaseEvent: return "ReleaseEvent";
  case Op::OpCreateUserEvent: return "CreateUserEvent";
  case Op::OpIsValidEvent: return "IsValidEvent";
  case Op::OpSetUserEventStatus: return "SetUserEventStatus";
  case Op::OpCaptureEventProfilingInfo: return "CaptureEventProfilingInfo";
  case Op::OpGetDefaultQueue: return "GetDefaultQueue";
  case Op::OpBuildNDRange: return "BuildNDRange";
  case Op::OpGetKernelLocalSizeForSubgroupCount: return "GetKernelLocalSizeForSubgroupCount";
  case Op::OpGetKernelMaxNumSubgroups: return "GetKernelMaxNumSubgroups";
  case Op::OpReadPipe: return "ReadPipe";
  case Op::OpWritePipe: return "WritePipe";
  case Op::OpReservedReadPipe: return "ReservedReadPipe";
  case Op::OpReservedWritePipe: return "ReservedWritePipe";
  case Op::OpReserveReadPipePackets: return "ReserveReadPipePackets";
  case Op::OpReserveWritePipePackets: return "ReserveWritePipePackets";
  case Op::OpCommitReadPipe: return "CommitReadPipe";
  case Op::OpCommitWritePipe: return "CommitWritePipe";
  case Op::OpIsValidReserveId: return "IsValidReserveId";
  case Op::OpGetNumPipePackets: return "GetNumPipePackets";
  case Op::OpGetMaxPipePackets: return "GetMaxPipePackets";
  case Op::OpGroupReserveReadPipePackets: return "GroupReserveReadPipePackets";
  case Op::OpGroupReserveWritePipePackets: return "GroupReserveWritePipePackets";
  case Op::OpGroupCommitReadPipe: return "GroupCommitReadPipe";
  case Op::OpGroupCommitWritePipe: return "GroupCommitWritePipe";
  case Op::OpConstantPipeStorage: return "ConstantPipeStorage";
  case Op::OpCreatePipeFromPipeStorage: return "CreatePipeFromPipeStorage";
  case Op::OpReadPipeBlockingINTEL: return "ReadPipeBlockingINTEL";
  case Op::OpWritePipeBlockingINTEL: return "WritePipeBlockingINTEL";
  case Op::OpGroupNonUniformElect: return "GroupNonUniformElect";
  case Op::OpGroupNonUniformAll: return "GroupNonUniformAll";
  case Op::OpGroupNonUniformAny: return "GroupNonUniformAny";
  case Op::OpGroupNonUniformAllEqual: return "GroupNonUniformAllEqual";
  case Op::OpGroupNonUniformBroadcast: return "GroupNonUniformBroadcast";
  case Op::OpGroupNonUniformBroadcastFirst: return "GroupNonUniformBroadcastFirst";
  case Op::OpGroupNonUniformBallot: return "GroupNonUniformBallot";
  case Op::OpGroupNonUniformInverseBallot: return "GroupNonUniformInverseBallot";
  case Op::OpGroupNonUniformBallotBitExtract: return "GroupNonUniformBallotBitExtract";
  case Op::OpGroupNonUniformBallotBitCount: return "GroupNonUniformBallotBitCount";
  case Op::OpGroupNonUniformBallotFindLSB: return "GroupNonUniformBallotFindLSB";
  case Op::OpGroupNonUniformBallotFindMSB: return "GroupNonUniformBallotFindMSB";
  case Op::OpGroupNonUniformShuffle: return "GroupNonUniformShuffle";
  case Op::OpGroupNonUniformShuffleXor: return "GroupNonUniformShuffleXor";
  case Op::OpGroupNonUniformShuffleUp: return "GroupNonUniformShuffleUp";
  case Op::OpGroupNonUniformShuffleDown: return "GroupNonUniformShuffleDown";
  case Op::OpGroupNonUniformIAdd: return "GroupNonUniformIAdd";
  case Op::OpGroupNonUniformFAdd: return "GroupNonUniformFAdd";
  case Op::OpGroupNonUniformIMul: return "GroupNonUniformIMul";
  case Op::OpGroupNonUniformFMul: return "GroupNonUniformFMul";
  case Op::OpGroupNonUniformSMin: return "GroupNonUniformSMin";
  case Op::OpGroupNonUniformUMin: return "GroupNonUniformUMin";
  case Op::OpGroupNonUniformFMin: return "GroupNonUniformFMin";
  case Op::OpGroupNonUniformSMax: return "GroupNonUniformSMax";
  case Op::OpGroupNonUniformUMax: return "GroupNonUniformUMax";
  case Op::OpGroupNonUniformFMax: return "GroupNonUniformFMax";
  case Op::OpGroupNonUniformBitwiseAnd: return "GroupNonUniformBitwiseAnd";
  case Op::OpGroupNonUniformBitwiseOr: return "GroupNonUniformBitwiseOr";
  case Op::OpGroupNonUniformBitwiseXor: return "GroupNonUniformBitwiseXor";
  case Op::OpGroupNonUniformLogicalAnd: return "GroupNonUniformLogicalAnd";
  case Op::OpGroupNonUniformLogicalOr: return "GroupNonUniformLogicalOr";
  case Op::OpGroupNonUniformLogicalXor: return "GroupNonUniformLogicalXor";
  case Op::OpGroupNonUniformQuadBroadcast: return "GroupNonUniformQuadBroadcast";
  case Op::OpGroupNonUniformQuadSwap: return "GroupNonUniformQuadSwap";
  case Op::OpGroupNonUniformPartitionNV: return "GroupNonUniformPartitionNV";
  case Op::OpTraceRayKHR: return "TraceRayKHR";
  case Op::OpExecuteCallableKHR: return "ExecuteCallableKHR";
  case Op::OpConvertUToAccelerationStructureKHR: return "ConvertUToAccelerationStructureKHR";
  case Op::OpIgnoreIntersectionKHR: return "IgnoreIntersectionKHR";
  case Op::OpTerminateRayKHR: return "TerminateRayKHR";
  case Op::OpTypeRayQueryKHR: return "TypeRayQueryKHR";
  case Op::OpRayQueryInitializeKHR: return "RayQueryInitializeKHR";
  case Op::OpRayQueryTerminateKHR: return "RayQueryTerminateKHR";
  case Op::OpRayQueryGenerateIntersectionKHR: return "RayQueryGenerateIntersectionKHR";
  case Op::OpRayQueryConfirmIntersectionKHR: return "RayQueryConfirmIntersectionKHR";
  case Op::OpRayQueryProceedKHR: return "RayQueryProceedKHR";
  case Op::OpRayQueryGetIntersectionTypeKHR: return "RayQueryGetIntersectionTypeKHR";
  case Op::OpFragmentMaskFetchAMD: return "FragmentMaskFetchAMD";
  case Op::OpFragmentFetchAMD: return "FragmentFetchAMD";
  case Op::OpReadClockKHR: return "ReadClockKHR";
  case Op::OpWritePackedPrimitiveIndices4x8NV: return "WritePackedPrimitiveIndices4x8NV";
  case Op::OpReportIntersectionNV: return "ReportIntersectionNV";
  case Op::OpIgnoreIntersectionNV: return "IgnoreIntersectionNV";
  case Op::OpTerminateRayNV: return "TerminateRayNV";
  case Op::OpTraceNV: return "TraceNV";
  case Op::OpTypeAccelerationStructureNV: return "TypeAccelerationStructureNV";
  case Op::OpExecuteCallableNV: return "ExecuteCallableNV";
  case Op::OpTypeCooperativeMatrixNV: return "TypeCooperativeMatrixNV";
  case Op::OpCooperativeMatrixLoadNV: return "CooperativeMatrixLoadNV";
  case Op::OpCooperativeMatrixStoreNV: return "CooperativeMatrixStoreNV";
  case Op::OpCooperativeMatrixMulAddNV: return "CooperativeMatrixMulAddNV";
  case Op::OpCooperativeMatrixLengthNV: return "CooperativeMatrixLengthNV";
  case Op::OpBeginInvocationInterlockEXT: return "BeginInvocationInterlockEXT";
  case Op::OpEndInvocationInterlockEXT: return "EndInvocationInterlockEXT";
  case Op::OpDemoteToHelperInvocationEXT: return "DemoteToHelperInvocationEXT";
  case Op::OpIsHelperInvocationEXT: return "IsHelperInvocationEXT";
  case Op::OpUCountLeadingZerosINTEL: return "UCountLeadingZerosINTEL";
  case Op::OpUCountTrailingZerosINTEL: return "UCountTrailingZerosINTEL";
  case Op::OpAbsISubINTEL: return "AbsISubINTEL";
  case Op::OpAbsUSubINTEL: return "AbsUSubINTEL";
  case Op::OpIAddSatINTEL: return "IAddSatINTEL";
  case Op::OpUAddSatINTEL: return "UAddSatINTEL";
  case Op::OpIAverageINTEL: return "IAverageINTEL";
  case Op::OpUAverageINTEL: return "UAverageINTEL";
  case Op::OpIAverageRoundedINTEL: return "IAverageRoundedINTEL";
  case Op::OpUAverageRoundedINTEL: return "UAverageRoundedINTEL";
  case Op::OpISubSatINTEL: return "ISubSatINTEL";
  case Op::OpUSubSatINTEL: return "USubSatINTEL";
  case Op::OpIMul32x16INTEL: return "IMul32x16INTEL";
  case Op::OpUMul32x16INTEL: return "UMul32x16INTEL";
  case Op::OpLoopControlINTEL: return "LoopControlINTEL";
  case Op::OpFPGARegINTEL: return "FPGARegINTEL";
  case Op::OpRayQueryGetRayTMinKHR: return "RayQueryGetRayTMinKHR";
  case Op::OpRayQueryGetRayFlagsKHR: return "RayQueryGetRayFlagsKHR";
  case Op::OpRayQueryGetIntersectionTKHR: return "RayQueryGetIntersectionTKHR";
  case Op::OpRayQueryGetIntersectionInstanceCustomIndexKHR: return "RayQueryGetIntersectionInstanceCustomIndexKHR";
  case Op::OpRayQueryGetIntersectionInstanceIdKHR: return "RayQueryGetIntersectionInstanceIdKHR";
  case Op::OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR: return "RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR";
  case Op::OpRayQueryGetIntersectionGeometryIndexKHR: return "RayQueryGetIntersectionGeometryIndexKHR";
  case Op::OpRayQueryGetIntersectionPrimitiveIndexKHR: return "RayQueryGetIntersectionPrimitiveIndexKHR";
  case Op::OpRayQueryGetIntersectionBarycentricsKHR: return "RayQueryGetIntersectionBarycentricsKHR";
  case Op::OpRayQueryGetIntersectionFrontFaceKHR: return "RayQueryGetIntersectionFrontFaceKHR";
  case Op::OpRayQueryGetIntersectionCandidateAABBOpaqueKHR: return "RayQueryGetIntersectionCandidateAABBOpaqueKHR";
  case Op::OpRayQueryGetIntersectionObjectRayDirectionKHR: return "RayQueryGetIntersectionObjectRayDirectionKHR";
  case Op::OpRayQueryGetIntersectionObjectRayOriginKHR: return "RayQueryGetIntersectionObjectRayOriginKHR";
  case Op::OpRayQueryGetWorldRayDirectionKHR: return "RayQueryGetWorldRayDirectionKHR";
  case Op::OpRayQueryGetWorldRayOriginKHR: return "RayQueryGetWorldRayOriginKHR";
  case Op::OpRayQueryGetIntersectionObjectToWorldKHR: return "RayQueryGetIntersectionObjectToWorldKHR";
  case Op::OpRayQueryGetIntersectionWorldToObjectKHR: return "RayQueryGetIntersectionWorldToObjectKHR";
  default: return nullptr;
}
}
} // namespace tinyspv
