// THIS IS A GENERATED SOURCE. MODIFICATION WILL BE OVERWRITTEN.
#include "tinyspv/opcode2str.hpp"
namespace tinyspv {
const char* opcode2str(int opcode) {
switch (opcode) {
case spv::Op::OpNop: return "Nop";
case spv::Op::OpUndef: return "Undef";
case spv::Op::OpSourceContinued: return "SourceContinued";
case spv::Op::OpSource: return "Source";
case spv::Op::OpSourceExtension: return "SourceExtension";
case spv::Op::OpName: return "Name";
case spv::Op::OpMemberName: return "MemberName";
case spv::Op::OpString: return "String";
case spv::Op::OpLine: return "Line";
case spv::Op::OpExtension: return "Extension";
case spv::Op::OpExtInstImport: return "ExtInstImport";
case spv::Op::OpExtInst: return "ExtInst";
case spv::Op::OpMemoryModel: return "MemoryModel";
case spv::Op::OpEntryPoint: return "EntryPoint";
case spv::Op::OpExecutionMode: return "ExecutionMode";
case spv::Op::OpCapability: return "Capability";
case spv::Op::OpTypeVoid: return "TypeVoid";
case spv::Op::OpTypeBool: return "TypeBool";
case spv::Op::OpTypeInt: return "TypeInt";
case spv::Op::OpTypeFloat: return "TypeFloat";
case spv::Op::OpTypeVector: return "TypeVector";
case spv::Op::OpTypeMatrix: return "TypeMatrix";
case spv::Op::OpTypeImage: return "TypeImage";
case spv::Op::OpTypeSampler: return "TypeSampler";
case spv::Op::OpTypeSampledImage: return "TypeSampledImage";
case spv::Op::OpTypeArray: return "TypeArray";
case spv::Op::OpTypeRuntimeArray: return "TypeRuntimeArray";
case spv::Op::OpTypeStruct: return "TypeStruct";
case spv::Op::OpTypeOpaque: return "TypeOpaque";
case spv::Op::OpTypePointer: return "TypePointer";
case spv::Op::OpTypeFunction: return "TypeFunction";
case spv::Op::OpTypeEvent: return "TypeEvent";
case spv::Op::OpTypeDeviceEvent: return "TypeDeviceEvent";
case spv::Op::OpTypeReserveId: return "TypeReserveId";
case spv::Op::OpTypeQueue: return "TypeQueue";
case spv::Op::OpTypePipe: return "TypePipe";
case spv::Op::OpTypeForwardPointer: return "TypeForwardPointer";
case spv::Op::OpConstantTrue: return "ConstantTrue";
case spv::Op::OpConstantFalse: return "ConstantFalse";
case spv::Op::OpConstant: return "Constant";
case spv::Op::OpConstantComposite: return "ConstantComposite";
case spv::Op::OpConstantSampler: return "ConstantSampler";
case spv::Op::OpConstantNull: return "ConstantNull";
case spv::Op::OpSpecConstantTrue: return "SpecConstantTrue";
case spv::Op::OpSpecConstantFalse: return "SpecConstantFalse";
case spv::Op::OpSpecConstant: return "SpecConstant";
case spv::Op::OpSpecConstantComposite: return "SpecConstantComposite";
case spv::Op::OpSpecConstantOp: return "SpecConstantOp";
case spv::Op::OpFunction: return "Function";
case spv::Op::OpFunctionParameter: return "FunctionParameter";
case spv::Op::OpFunctionEnd: return "FunctionEnd";
case spv::Op::OpFunctionCall: return "FunctionCall";
case spv::Op::OpVariable: return "Variable";
case spv::Op::OpImageTexelPointer: return "ImageTexelPointer";
case spv::Op::OpLoad: return "Load";
case spv::Op::OpStore: return "Store";
case spv::Op::OpCopyMemory: return "CopyMemory";
case spv::Op::OpCopyMemorySized: return "CopyMemorySized";
case spv::Op::OpAccessChain: return "AccessChain";
case spv::Op::OpInBoundsAccessChain: return "InBoundsAccessChain";
case spv::Op::OpPtrAccessChain: return "PtrAccessChain";
case spv::Op::OpArrayLength: return "ArrayLength";
case spv::Op::OpGenericPtrMemSemantics: return "GenericPtrMemSemantics";
case spv::Op::OpInBoundsPtrAccessChain: return "InBoundsPtrAccessChain";
case spv::Op::OpDecorate: return "Decorate";
case spv::Op::OpMemberDecorate: return "MemberDecorate";
case spv::Op::OpDecorationGroup: return "DecorationGroup";
case spv::Op::OpGroupDecorate: return "GroupDecorate";
case spv::Op::OpGroupMemberDecorate: return "GroupMemberDecorate";
case spv::Op::OpVectorExtractDynamic: return "VectorExtractDynamic";
case spv::Op::OpVectorInsertDynamic: return "VectorInsertDynamic";
case spv::Op::OpVectorShuffle: return "VectorShuffle";
case spv::Op::OpCompositeConstruct: return "CompositeConstruct";
case spv::Op::OpCompositeExtract: return "CompositeExtract";
case spv::Op::OpCompositeInsert: return "CompositeInsert";
case spv::Op::OpCopyObject: return "CopyObject";
case spv::Op::OpTranspose: return "Transpose";
case spv::Op::OpSampledImage: return "SampledImage";
case spv::Op::OpImageSampleImplicitLod: return "ImageSampleImplicitLod";
case spv::Op::OpImageSampleExplicitLod: return "ImageSampleExplicitLod";
case spv::Op::OpImageSampleDrefImplicitLod: return "ImageSampleDrefImplicitLod";
case spv::Op::OpImageSampleDrefExplicitLod: return "ImageSampleDrefExplicitLod";
case spv::Op::OpImageSampleProjImplicitLod: return "ImageSampleProjImplicitLod";
case spv::Op::OpImageSampleProjExplicitLod: return "ImageSampleProjExplicitLod";
case spv::Op::OpImageSampleProjDrefImplicitLod: return "ImageSampleProjDrefImplicitLod";
case spv::Op::OpImageSampleProjDrefExplicitLod: return "ImageSampleProjDrefExplicitLod";
case spv::Op::OpImageFetch: return "ImageFetch";
case spv::Op::OpImageGather: return "ImageGather";
case spv::Op::OpImageDrefGather: return "ImageDrefGather";
case spv::Op::OpImageRead: return "ImageRead";
case spv::Op::OpImageWrite: return "ImageWrite";
case spv::Op::OpImage: return "Image";
case spv::Op::OpImageQueryFormat: return "ImageQueryFormat";
case spv::Op::OpImageQueryOrder: return "ImageQueryOrder";
case spv::Op::OpImageQuerySizeLod: return "ImageQuerySizeLod";
case spv::Op::OpImageQuerySize: return "ImageQuerySize";
case spv::Op::OpImageQueryLod: return "ImageQueryLod";
case spv::Op::OpImageQueryLevels: return "ImageQueryLevels";
case spv::Op::OpImageQuerySamples: return "ImageQuerySamples";
case spv::Op::OpConvertFToU: return "ConvertFToU";
case spv::Op::OpConvertFToS: return "ConvertFToS";
case spv::Op::OpConvertSToF: return "ConvertSToF";
case spv::Op::OpConvertUToF: return "ConvertUToF";
case spv::Op::OpUConvert: return "UConvert";
case spv::Op::OpSConvert: return "SConvert";
case spv::Op::OpFConvert: return "FConvert";
case spv::Op::OpQuantizeToF16: return "QuantizeToF16";
case spv::Op::OpConvertPtrToU: return "ConvertPtrToU";
case spv::Op::OpSatConvertSToU: return "SatConvertSToU";
case spv::Op::OpSatConvertUToS: return "SatConvertUToS";
case spv::Op::OpConvertUToPtr: return "ConvertUToPtr";
case spv::Op::OpPtrCastToGeneric: return "PtrCastToGeneric";
case spv::Op::OpGenericCastToPtr: return "GenericCastToPtr";
case spv::Op::OpGenericCastToPtrExplicit: return "GenericCastToPtrExplicit";
case spv::Op::OpBitcast: return "Bitcast";
case spv::Op::OpSNegate: return "SNegate";
case spv::Op::OpFNegate: return "FNegate";
case spv::Op::OpIAdd: return "IAdd";
case spv::Op::OpFAdd: return "FAdd";
case spv::Op::OpISub: return "ISub";
case spv::Op::OpFSub: return "FSub";
case spv::Op::OpIMul: return "IMul";
case spv::Op::OpFMul: return "FMul";
case spv::Op::OpUDiv: return "UDiv";
case spv::Op::OpSDiv: return "SDiv";
case spv::Op::OpFDiv: return "FDiv";
case spv::Op::OpUMod: return "UMod";
case spv::Op::OpSRem: return "SRem";
case spv::Op::OpSMod: return "SMod";
case spv::Op::OpFRem: return "FRem";
case spv::Op::OpFMod: return "FMod";
case spv::Op::OpVectorTimesScalar: return "VectorTimesScalar";
case spv::Op::OpMatrixTimesScalar: return "MatrixTimesScalar";
case spv::Op::OpVectorTimesMatrix: return "VectorTimesMatrix";
case spv::Op::OpMatrixTimesVector: return "MatrixTimesVector";
case spv::Op::OpMatrixTimesMatrix: return "MatrixTimesMatrix";
case spv::Op::OpOuterProduct: return "OuterProduct";
case spv::Op::OpDot: return "Dot";
case spv::Op::OpIAddCarry: return "IAddCarry";
case spv::Op::OpISubBorrow: return "ISubBorrow";
case spv::Op::OpUMulExtended: return "UMulExtended";
case spv::Op::OpSMulExtended: return "SMulExtended";
case spv::Op::OpAny: return "Any";
case spv::Op::OpAll: return "All";
case spv::Op::OpIsNan: return "IsNan";
case spv::Op::OpIsInf: return "IsInf";
case spv::Op::OpIsFinite: return "IsFinite";
case spv::Op::OpIsNormal: return "IsNormal";
case spv::Op::OpSignBitSet: return "SignBitSet";
case spv::Op::OpLessOrGreater: return "LessOrGreater";
case spv::Op::OpOrdered: return "Ordered";
case spv::Op::OpUnordered: return "Unordered";
case spv::Op::OpLogicalEqual: return "LogicalEqual";
case spv::Op::OpLogicalNotEqual: return "LogicalNotEqual";
case spv::Op::OpLogicalOr: return "LogicalOr";
case spv::Op::OpLogicalAnd: return "LogicalAnd";
case spv::Op::OpLogicalNot: return "LogicalNot";
case spv::Op::OpSelect: return "Select";
case spv::Op::OpIEqual: return "IEqual";
case spv::Op::OpINotEqual: return "INotEqual";
case spv::Op::OpUGreaterThan: return "UGreaterThan";
case spv::Op::OpSGreaterThan: return "SGreaterThan";
case spv::Op::OpUGreaterThanEqual: return "UGreaterThanEqual";
case spv::Op::OpSGreaterThanEqual: return "SGreaterThanEqual";
case spv::Op::OpULessThan: return "ULessThan";
case spv::Op::OpSLessThan: return "SLessThan";
case spv::Op::OpULessThanEqual: return "ULessThanEqual";
case spv::Op::OpSLessThanEqual: return "SLessThanEqual";
case spv::Op::OpFOrdEqual: return "FOrdEqual";
case spv::Op::OpFUnordEqual: return "FUnordEqual";
case spv::Op::OpFOrdNotEqual: return "FOrdNotEqual";
case spv::Op::OpFUnordNotEqual: return "FUnordNotEqual";
case spv::Op::OpFOrdLessThan: return "FOrdLessThan";
case spv::Op::OpFUnordLessThan: return "FUnordLessThan";
case spv::Op::OpFOrdGreaterThan: return "FOrdGreaterThan";
case spv::Op::OpFUnordGreaterThan: return "FUnordGreaterThan";
case spv::Op::OpFOrdLessThanEqual: return "FOrdLessThanEqual";
case spv::Op::OpFUnordLessThanEqual: return "FUnordLessThanEqual";
case spv::Op::OpFOrdGreaterThanEqual: return "FOrdGreaterThanEqual";
case spv::Op::OpFUnordGreaterThanEqual: return "FUnordGreaterThanEqual";
case spv::Op::OpShiftRightLogical: return "ShiftRightLogical";
case spv::Op::OpShiftRightArithmetic: return "ShiftRightArithmetic";
case spv::Op::OpShiftLeftLogical: return "ShiftLeftLogical";
case spv::Op::OpBitwiseOr: return "BitwiseOr";
case spv::Op::OpBitwiseXor: return "BitwiseXor";
case spv::Op::OpBitwiseAnd: return "BitwiseAnd";
case spv::Op::OpNot: return "Not";
case spv::Op::OpBitFieldInsert: return "BitFieldInsert";
case spv::Op::OpBitFieldSExtract: return "BitFieldSExtract";
case spv::Op::OpBitFieldUExtract: return "BitFieldUExtract";
case spv::Op::OpBitReverse: return "BitReverse";
case spv::Op::OpBitCount: return "BitCount";
case spv::Op::OpDPdx: return "DPdx";
case spv::Op::OpDPdy: return "DPdy";
case spv::Op::OpFwidth: return "Fwidth";
case spv::Op::OpDPdxFine: return "DPdxFine";
case spv::Op::OpDPdyFine: return "DPdyFine";
case spv::Op::OpFwidthFine: return "FwidthFine";
case spv::Op::OpDPdxCoarse: return "DPdxCoarse";
case spv::Op::OpDPdyCoarse: return "DPdyCoarse";
case spv::Op::OpFwidthCoarse: return "FwidthCoarse";
case spv::Op::OpEmitVertex: return "EmitVertex";
case spv::Op::OpEndPrimitive: return "EndPrimitive";
case spv::Op::OpEmitStreamVertex: return "EmitStreamVertex";
case spv::Op::OpEndStreamPrimitive: return "EndStreamPrimitive";
case spv::Op::OpControlBarrier: return "ControlBarrier";
case spv::Op::OpMemoryBarrier: return "MemoryBarrier";
case spv::Op::OpAtomicLoad: return "AtomicLoad";
case spv::Op::OpAtomicStore: return "AtomicStore";
case spv::Op::OpAtomicExchange: return "AtomicExchange";
case spv::Op::OpAtomicCompareExchange: return "AtomicCompareExchange";
case spv::Op::OpAtomicCompareExchangeWeak: return "AtomicCompareExchangeWeak";
case spv::Op::OpAtomicIIncrement: return "AtomicIIncrement";
case spv::Op::OpAtomicIDecrement: return "AtomicIDecrement";
case spv::Op::OpAtomicIAdd: return "AtomicIAdd";
case spv::Op::OpAtomicISub: return "AtomicISub";
case spv::Op::OpAtomicSMin: return "AtomicSMin";
case spv::Op::OpAtomicUMin: return "AtomicUMin";
case spv::Op::OpAtomicSMax: return "AtomicSMax";
case spv::Op::OpAtomicUMax: return "AtomicUMax";
case spv::Op::OpAtomicAnd: return "AtomicAnd";
case spv::Op::OpAtomicOr: return "AtomicOr";
case spv::Op::OpAtomicXor: return "AtomicXor";
case spv::Op::OpPhi: return "Phi";
case spv::Op::OpLoopMerge: return "LoopMerge";
case spv::Op::OpSelectionMerge: return "SelectionMerge";
case spv::Op::OpLabel: return "Label";
case spv::Op::OpBranch: return "Branch";
case spv::Op::OpBranchConditional: return "BranchConditional";
case spv::Op::OpSwitch: return "Switch";
case spv::Op::OpKill: return "Kill";
case spv::Op::OpReturn: return "Return";
case spv::Op::OpReturnValue: return "ReturnValue";
case spv::Op::OpUnreachable: return "Unreachable";
case spv::Op::OpLifetimeStart: return "LifetimeStart";
case spv::Op::OpLifetimeStop: return "LifetimeStop";
case spv::Op::OpGroupAsyncCopy: return "GroupAsyncCopy";
case spv::Op::OpGroupWaitEvents: return "GroupWaitEvents";
case spv::Op::OpGroupAll: return "GroupAll";
case spv::Op::OpGroupAny: return "GroupAny";
case spv::Op::OpGroupBroadcast: return "GroupBroadcast";
case spv::Op::OpGroupIAdd: return "GroupIAdd";
case spv::Op::OpGroupFAdd: return "GroupFAdd";
case spv::Op::OpGroupFMin: return "GroupFMin";
case spv::Op::OpGroupUMin: return "GroupUMin";
case spv::Op::OpGroupSMin: return "GroupSMin";
case spv::Op::OpGroupFMax: return "GroupFMax";
case spv::Op::OpGroupUMax: return "GroupUMax";
case spv::Op::OpGroupSMax: return "GroupSMax";
case spv::Op::OpReadPipe: return "ReadPipe";
case spv::Op::OpWritePipe: return "WritePipe";
case spv::Op::OpReservedReadPipe: return "ReservedReadPipe";
case spv::Op::OpReservedWritePipe: return "ReservedWritePipe";
case spv::Op::OpReserveReadPipePackets: return "ReserveReadPipePackets";
case spv::Op::OpReserveWritePipePackets: return "ReserveWritePipePackets";
case spv::Op::OpCommitReadPipe: return "CommitReadPipe";
case spv::Op::OpCommitWritePipe: return "CommitWritePipe";
case spv::Op::OpIsValidReserveId: return "IsValidReserveId";
case spv::Op::OpGetNumPipePackets: return "GetNumPipePackets";
case spv::Op::OpGetMaxPipePackets: return "GetMaxPipePackets";
case spv::Op::OpGroupReserveReadPipePackets: return "GroupReserveReadPipePackets";
case spv::Op::OpGroupReserveWritePipePackets: return "GroupReserveWritePipePackets";
case spv::Op::OpGroupCommitReadPipe: return "GroupCommitReadPipe";
case spv::Op::OpGroupCommitWritePipe: return "GroupCommitWritePipe";
case spv::Op::OpEnqueueMarker: return "EnqueueMarker";
case spv::Op::OpEnqueueKernel: return "EnqueueKernel";
case spv::Op::OpGetKernelNDrangeSubGroupCount: return "GetKernelNDrangeSubGroupCount";
case spv::Op::OpGetKernelNDrangeMaxSubGroupSize: return "GetKernelNDrangeMaxSubGroupSize";
case spv::Op::OpGetKernelWorkGroupSize: return "GetKernelWorkGroupSize";
case spv::Op::OpGetKernelPreferredWorkGroupSizeMultiple: return "GetKernelPreferredWorkGroupSizeMultiple";
case spv::Op::OpRetainEvent: return "RetainEvent";
case spv::Op::OpReleaseEvent: return "ReleaseEvent";
case spv::Op::OpCreateUserEvent: return "CreateUserEvent";
case spv::Op::OpIsValidEvent: return "IsValidEvent";
case spv::Op::OpSetUserEventStatus: return "SetUserEventStatus";
case spv::Op::OpCaptureEventProfilingInfo: return "CaptureEventProfilingInfo";
case spv::Op::OpGetDefaultQueue: return "GetDefaultQueue";
case spv::Op::OpBuildNDRange: return "BuildNDRange";
case spv::Op::OpImageSparseSampleImplicitLod: return "ImageSparseSampleImplicitLod";
case spv::Op::OpImageSparseSampleExplicitLod: return "ImageSparseSampleExplicitLod";
case spv::Op::OpImageSparseSampleDrefImplicitLod: return "ImageSparseSampleDrefImplicitLod";
case spv::Op::OpImageSparseSampleDrefExplicitLod: return "ImageSparseSampleDrefExplicitLod";
case spv::Op::OpImageSparseSampleProjImplicitLod: return "ImageSparseSampleProjImplicitLod";
case spv::Op::OpImageSparseSampleProjExplicitLod: return "ImageSparseSampleProjExplicitLod";
case spv::Op::OpImageSparseSampleProjDrefImplicitLod: return "ImageSparseSampleProjDrefImplicitLod";
case spv::Op::OpImageSparseSampleProjDrefExplicitLod: return "ImageSparseSampleProjDrefExplicitLod";
case spv::Op::OpImageSparseFetch: return "ImageSparseFetch";
case spv::Op::OpImageSparseGather: return "ImageSparseGather";
case spv::Op::OpImageSparseDrefGather: return "ImageSparseDrefGather";
case spv::Op::OpImageSparseTexelsResident: return "ImageSparseTexelsResident";
case spv::Op::OpNoLine: return "NoLine";
case spv::Op::OpAtomicFlagTestAndSet: return "AtomicFlagTestAndSet";
case spv::Op::OpAtomicFlagClear: return "AtomicFlagClear";
case spv::Op::OpImageSparseRead: return "ImageSparseRead";
case spv::Op::OpSizeOf: return "SizeOf";
case spv::Op::OpTypePipeStorage: return "TypePipeStorage";
case spv::Op::OpConstantPipeStorage: return "ConstantPipeStorage";
case spv::Op::OpCreatePipeFromPipeStorage: return "CreatePipeFromPipeStorage";
case spv::Op::OpGetKernelLocalSizeForSubgroupCount: return "GetKernelLocalSizeForSubgroupCount";
case spv::Op::OpGetKernelMaxNumSubgroups: return "GetKernelMaxNumSubgroups";
case spv::Op::OpTypeNamedBarrier: return "TypeNamedBarrier";
case spv::Op::OpNamedBarrierInitialize: return "NamedBarrierInitialize";
case spv::Op::OpMemoryNamedBarrier: return "MemoryNamedBarrier";
case spv::Op::OpModuleProcessed: return "ModuleProcessed";
case spv::Op::OpExecutionModeId: return "ExecutionModeId";
case spv::Op::OpDecorateId: return "DecorateId";
case spv::Op::OpGroupNonUniformElect: return "GroupNonUniformElect";
case spv::Op::OpGroupNonUniformAll: return "GroupNonUniformAll";
case spv::Op::OpGroupNonUniformAny: return "GroupNonUniformAny";
case spv::Op::OpGroupNonUniformAllEqual: return "GroupNonUniformAllEqual";
case spv::Op::OpGroupNonUniformBroadcast: return "GroupNonUniformBroadcast";
case spv::Op::OpGroupNonUniformBroadcastFirst: return "GroupNonUniformBroadcastFirst";
case spv::Op::OpGroupNonUniformBallot: return "GroupNonUniformBallot";
case spv::Op::OpGroupNonUniformInverseBallot: return "GroupNonUniformInverseBallot";
case spv::Op::OpGroupNonUniformBallotBitExtract: return "GroupNonUniformBallotBitExtract";
case spv::Op::OpGroupNonUniformBallotBitCount: return "GroupNonUniformBallotBitCount";
case spv::Op::OpGroupNonUniformBallotFindLSB: return "GroupNonUniformBallotFindLSB";
case spv::Op::OpGroupNonUniformBallotFindMSB: return "GroupNonUniformBallotFindMSB";
case spv::Op::OpGroupNonUniformShuffle: return "GroupNonUniformShuffle";
case spv::Op::OpGroupNonUniformShuffleXor: return "GroupNonUniformShuffleXor";
case spv::Op::OpGroupNonUniformShuffleUp: return "GroupNonUniformShuffleUp";
case spv::Op::OpGroupNonUniformShuffleDown: return "GroupNonUniformShuffleDown";
case spv::Op::OpGroupNonUniformIAdd: return "GroupNonUniformIAdd";
case spv::Op::OpGroupNonUniformFAdd: return "GroupNonUniformFAdd";
case spv::Op::OpGroupNonUniformIMul: return "GroupNonUniformIMul";
case spv::Op::OpGroupNonUniformFMul: return "GroupNonUniformFMul";
case spv::Op::OpGroupNonUniformSMin: return "GroupNonUniformSMin";
case spv::Op::OpGroupNonUniformUMin: return "GroupNonUniformUMin";
case spv::Op::OpGroupNonUniformFMin: return "GroupNonUniformFMin";
case spv::Op::OpGroupNonUniformSMax: return "GroupNonUniformSMax";
case spv::Op::OpGroupNonUniformUMax: return "GroupNonUniformUMax";
case spv::Op::OpGroupNonUniformFMax: return "GroupNonUniformFMax";
case spv::Op::OpGroupNonUniformBitwiseAnd: return "GroupNonUniformBitwiseAnd";
case spv::Op::OpGroupNonUniformBitwiseOr: return "GroupNonUniformBitwiseOr";
case spv::Op::OpGroupNonUniformBitwiseXor: return "GroupNonUniformBitwiseXor";
case spv::Op::OpGroupNonUniformLogicalAnd: return "GroupNonUniformLogicalAnd";
case spv::Op::OpGroupNonUniformLogicalOr: return "GroupNonUniformLogicalOr";
case spv::Op::OpGroupNonUniformLogicalXor: return "GroupNonUniformLogicalXor";
case spv::Op::OpGroupNonUniformQuadBroadcast: return "GroupNonUniformQuadBroadcast";
case spv::Op::OpGroupNonUniformQuadSwap: return "GroupNonUniformQuadSwap";
case spv::Op::OpCopyLogical: return "CopyLogical";
case spv::Op::OpPtrEqual: return "PtrEqual";
case spv::Op::OpPtrNotEqual: return "PtrNotEqual";
case spv::Op::OpPtrDiff: return "PtrDiff";
case spv::Op::OpTerminateInvocation: return "TerminateInvocation";
case spv::Op::OpSubgroupBallotKHR: return "SubgroupBallotKHR";
case spv::Op::OpSubgroupFirstInvocationKHR: return "SubgroupFirstInvocationKHR";
case spv::Op::OpSubgroupAllKHR: return "SubgroupAllKHR";
case spv::Op::OpSubgroupAnyKHR: return "SubgroupAnyKHR";
case spv::Op::OpSubgroupAllEqualKHR: return "SubgroupAllEqualKHR";
case spv::Op::OpSubgroupReadInvocationKHR: return "SubgroupReadInvocationKHR";
case spv::Op::OpTraceRayKHR: return "TraceRayKHR";
case spv::Op::OpExecuteCallableKHR: return "ExecuteCallableKHR";
case spv::Op::OpConvertUToAccelerationStructureKHR: return "ConvertUToAccelerationStructureKHR";
case spv::Op::OpIgnoreIntersectionKHR: return "IgnoreIntersectionKHR";
case spv::Op::OpTerminateRayKHR: return "TerminateRayKHR";
case spv::Op::OpSDotKHR: return "SDotKHR";
case spv::Op::OpUDotKHR: return "UDotKHR";
case spv::Op::OpSUDotKHR: return "SUDotKHR";
case spv::Op::OpSDotAccSatKHR: return "SDotAccSatKHR";
case spv::Op::OpUDotAccSatKHR: return "UDotAccSatKHR";
case spv::Op::OpSUDotAccSatKHR: return "SUDotAccSatKHR";
case spv::Op::OpTypeRayQueryKHR: return "TypeRayQueryKHR";
case spv::Op::OpRayQueryInitializeKHR: return "RayQueryInitializeKHR";
case spv::Op::OpRayQueryTerminateKHR: return "RayQueryTerminateKHR";
case spv::Op::OpRayQueryGenerateIntersectionKHR: return "RayQueryGenerateIntersectionKHR";
case spv::Op::OpRayQueryConfirmIntersectionKHR: return "RayQueryConfirmIntersectionKHR";
case spv::Op::OpRayQueryProceedKHR: return "RayQueryProceedKHR";
case spv::Op::OpRayQueryGetIntersectionTypeKHR: return "RayQueryGetIntersectionTypeKHR";
case spv::Op::OpGroupIAddNonUniformAMD: return "GroupIAddNonUniformAMD";
case spv::Op::OpGroupFAddNonUniformAMD: return "GroupFAddNonUniformAMD";
case spv::Op::OpGroupFMinNonUniformAMD: return "GroupFMinNonUniformAMD";
case spv::Op::OpGroupUMinNonUniformAMD: return "GroupUMinNonUniformAMD";
case spv::Op::OpGroupSMinNonUniformAMD: return "GroupSMinNonUniformAMD";
case spv::Op::OpGroupFMaxNonUniformAMD: return "GroupFMaxNonUniformAMD";
case spv::Op::OpGroupUMaxNonUniformAMD: return "GroupUMaxNonUniformAMD";
case spv::Op::OpGroupSMaxNonUniformAMD: return "GroupSMaxNonUniformAMD";
case spv::Op::OpFragmentMaskFetchAMD: return "FragmentMaskFetchAMD";
case spv::Op::OpFragmentFetchAMD: return "FragmentFetchAMD";
case spv::Op::OpReadClockKHR: return "ReadClockKHR";
case spv::Op::OpImageSampleFootprintNV: return "ImageSampleFootprintNV";
case spv::Op::OpGroupNonUniformPartitionNV: return "GroupNonUniformPartitionNV";
case spv::Op::OpWritePackedPrimitiveIndices4x8NV: return "WritePackedPrimitiveIndices4x8NV";
case spv::Op::OpReportIntersectionNV: return "ReportIntersectionNV";
case spv::Op::OpIgnoreIntersectionNV: return "IgnoreIntersectionNV";
case spv::Op::OpTerminateRayNV: return "TerminateRayNV";
case spv::Op::OpTraceNV: return "TraceNV";
case spv::Op::OpTraceMotionNV: return "TraceMotionNV";
case spv::Op::OpTraceRayMotionNV: return "TraceRayMotionNV";
case spv::Op::OpTypeAccelerationStructureNV: return "TypeAccelerationStructureNV";
case spv::Op::OpExecuteCallableNV: return "ExecuteCallableNV";
case spv::Op::OpTypeCooperativeMatrixNV: return "TypeCooperativeMatrixNV";
case spv::Op::OpCooperativeMatrixLoadNV: return "CooperativeMatrixLoadNV";
case spv::Op::OpCooperativeMatrixStoreNV: return "CooperativeMatrixStoreNV";
case spv::Op::OpCooperativeMatrixMulAddNV: return "CooperativeMatrixMulAddNV";
case spv::Op::OpCooperativeMatrixLengthNV: return "CooperativeMatrixLengthNV";
case spv::Op::OpBeginInvocationInterlockEXT: return "BeginInvocationInterlockEXT";
case spv::Op::OpEndInvocationInterlockEXT: return "EndInvocationInterlockEXT";
case spv::Op::OpDemoteToHelperInvocationEXT: return "DemoteToHelperInvocationEXT";
case spv::Op::OpIsHelperInvocationEXT: return "IsHelperInvocationEXT";
case spv::Op::OpSubgroupShuffleINTEL: return "SubgroupShuffleINTEL";
case spv::Op::OpSubgroupShuffleDownINTEL: return "SubgroupShuffleDownINTEL";
case spv::Op::OpSubgroupShuffleUpINTEL: return "SubgroupShuffleUpINTEL";
case spv::Op::OpSubgroupShuffleXorINTEL: return "SubgroupShuffleXorINTEL";
case spv::Op::OpSubgroupBlockReadINTEL: return "SubgroupBlockReadINTEL";
case spv::Op::OpSubgroupBlockWriteINTEL: return "SubgroupBlockWriteINTEL";
case spv::Op::OpSubgroupImageBlockReadINTEL: return "SubgroupImageBlockReadINTEL";
case spv::Op::OpSubgroupImageBlockWriteINTEL: return "SubgroupImageBlockWriteINTEL";
case spv::Op::OpSubgroupImageMediaBlockReadINTEL: return "SubgroupImageMediaBlockReadINTEL";
case spv::Op::OpSubgroupImageMediaBlockWriteINTEL: return "SubgroupImageMediaBlockWriteINTEL";
case spv::Op::OpUCountLeadingZerosINTEL: return "UCountLeadingZerosINTEL";
case spv::Op::OpUCountTrailingZerosINTEL: return "UCountTrailingZerosINTEL";
case spv::Op::OpAbsISubINTEL: return "AbsISubINTEL";
case spv::Op::OpAbsUSubINTEL: return "AbsUSubINTEL";
case spv::Op::OpIAddSatINTEL: return "IAddSatINTEL";
case spv::Op::OpUAddSatINTEL: return "UAddSatINTEL";
case spv::Op::OpIAverageINTEL: return "IAverageINTEL";
case spv::Op::OpUAverageINTEL: return "UAverageINTEL";
case spv::Op::OpIAverageRoundedINTEL: return "IAverageRoundedINTEL";
case spv::Op::OpUAverageRoundedINTEL: return "UAverageRoundedINTEL";
case spv::Op::OpISubSatINTEL: return "ISubSatINTEL";
case spv::Op::OpUSubSatINTEL: return "USubSatINTEL";
case spv::Op::OpIMul32x16INTEL: return "IMul32x16INTEL";
case spv::Op::OpUMul32x16INTEL: return "UMul32x16INTEL";
case spv::Op::OpConstFunctionPointerINTEL: return "ConstFunctionPointerINTEL";
case spv::Op::OpFunctionPointerCallINTEL: return "FunctionPointerCallINTEL";
case spv::Op::OpAsmTargetINTEL: return "AsmTargetINTEL";
case spv::Op::OpAsmINTEL: return "AsmINTEL";
case spv::Op::OpAsmCallINTEL: return "AsmCallINTEL";
case spv::Op::OpAtomicFMinEXT: return "AtomicFMinEXT";
case spv::Op::OpAtomicFMaxEXT: return "AtomicFMaxEXT";
case spv::Op::OpAssumeTrueKHR: return "AssumeTrueKHR";
case spv::Op::OpExpectKHR: return "ExpectKHR";
case spv::Op::OpDecorateString: return "DecorateString";
case spv::Op::OpMemberDecorateString: return "MemberDecorateString";
case spv::Op::OpVmeImageINTEL: return "VmeImageINTEL";
case spv::Op::OpTypeVmeImageINTEL: return "TypeVmeImageINTEL";
case spv::Op::OpTypeAvcImePayloadINTEL: return "TypeAvcImePayloadINTEL";
case spv::Op::OpTypeAvcRefPayloadINTEL: return "TypeAvcRefPayloadINTEL";
case spv::Op::OpTypeAvcSicPayloadINTEL: return "TypeAvcSicPayloadINTEL";
case spv::Op::OpTypeAvcMcePayloadINTEL: return "TypeAvcMcePayloadINTEL";
case spv::Op::OpTypeAvcMceResultINTEL: return "TypeAvcMceResultINTEL";
case spv::Op::OpTypeAvcImeResultINTEL: return "TypeAvcImeResultINTEL";
case spv::Op::OpTypeAvcImeResultSingleReferenceStreamoutINTEL: return "TypeAvcImeResultSingleReferenceStreamoutINTEL";
case spv::Op::OpTypeAvcImeResultDualReferenceStreamoutINTEL: return "TypeAvcImeResultDualReferenceStreamoutINTEL";
case spv::Op::OpTypeAvcImeSingleReferenceStreaminINTEL: return "TypeAvcImeSingleReferenceStreaminINTEL";
case spv::Op::OpTypeAvcImeDualReferenceStreaminINTEL: return "TypeAvcImeDualReferenceStreaminINTEL";
case spv::Op::OpTypeAvcRefResultINTEL: return "TypeAvcRefResultINTEL";
case spv::Op::OpTypeAvcSicResultINTEL: return "TypeAvcSicResultINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL: return "SubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL";
case spv::Op::OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL: return "SubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL: return "SubgroupAvcMceGetDefaultInterShapePenaltyINTEL";
case spv::Op::OpSubgroupAvcMceSetInterShapePenaltyINTEL: return "SubgroupAvcMceSetInterShapePenaltyINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL: return "SubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL";
case spv::Op::OpSubgroupAvcMceSetInterDirectionPenaltyINTEL: return "SubgroupAvcMceSetInterDirectionPenaltyINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL: return "SubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL: return "SubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL: return "SubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL: return "SubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL: return "SubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL";
case spv::Op::OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL: return "SubgroupAvcMceSetMotionVectorCostFunctionINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL: return "SubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL: return "SubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL";
case spv::Op::OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL: return "SubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL";
case spv::Op::OpSubgroupAvcMceSetAcOnlyHaarINTEL: return "SubgroupAvcMceSetAcOnlyHaarINTEL";
case spv::Op::OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL: return "SubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL";
case spv::Op::OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL: return "SubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL";
case spv::Op::OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL: return "SubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL";
case spv::Op::OpSubgroupAvcMceConvertToImePayloadINTEL: return "SubgroupAvcMceConvertToImePayloadINTEL";
case spv::Op::OpSubgroupAvcMceConvertToImeResultINTEL: return "SubgroupAvcMceConvertToImeResultINTEL";
case spv::Op::OpSubgroupAvcMceConvertToRefPayloadINTEL: return "SubgroupAvcMceConvertToRefPayloadINTEL";
case spv::Op::OpSubgroupAvcMceConvertToRefResultINTEL: return "SubgroupAvcMceConvertToRefResultINTEL";
case spv::Op::OpSubgroupAvcMceConvertToSicPayloadINTEL: return "SubgroupAvcMceConvertToSicPayloadINTEL";
case spv::Op::OpSubgroupAvcMceConvertToSicResultINTEL: return "SubgroupAvcMceConvertToSicResultINTEL";
case spv::Op::OpSubgroupAvcMceGetMotionVectorsINTEL: return "SubgroupAvcMceGetMotionVectorsINTEL";
case spv::Op::OpSubgroupAvcMceGetInterDistortionsINTEL: return "SubgroupAvcMceGetInterDistortionsINTEL";
case spv::Op::OpSubgroupAvcMceGetBestInterDistortionsINTEL: return "SubgroupAvcMceGetBestInterDistortionsINTEL";
case spv::Op::OpSubgroupAvcMceGetInterMajorShapeINTEL: return "SubgroupAvcMceGetInterMajorShapeINTEL";
case spv::Op::OpSubgroupAvcMceGetInterMinorShapeINTEL: return "SubgroupAvcMceGetInterMinorShapeINTEL";
case spv::Op::OpSubgroupAvcMceGetInterDirectionsINTEL: return "SubgroupAvcMceGetInterDirectionsINTEL";
case spv::Op::OpSubgroupAvcMceGetInterMotionVectorCountINTEL: return "SubgroupAvcMceGetInterMotionVectorCountINTEL";
case spv::Op::OpSubgroupAvcMceGetInterReferenceIdsINTEL: return "SubgroupAvcMceGetInterReferenceIdsINTEL";
case spv::Op::OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL: return "SubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL";
case spv::Op::OpSubgroupAvcImeInitializeINTEL: return "SubgroupAvcImeInitializeINTEL";
case spv::Op::OpSubgroupAvcImeSetSingleReferenceINTEL: return "SubgroupAvcImeSetSingleReferenceINTEL";
case spv::Op::OpSubgroupAvcImeSetDualReferenceINTEL: return "SubgroupAvcImeSetDualReferenceINTEL";
case spv::Op::OpSubgroupAvcImeRefWindowSizeINTEL: return "SubgroupAvcImeRefWindowSizeINTEL";
case spv::Op::OpSubgroupAvcImeAdjustRefOffsetINTEL: return "SubgroupAvcImeAdjustRefOffsetINTEL";
case spv::Op::OpSubgroupAvcImeConvertToMcePayloadINTEL: return "SubgroupAvcImeConvertToMcePayloadINTEL";
case spv::Op::OpSubgroupAvcImeSetMaxMotionVectorCountINTEL: return "SubgroupAvcImeSetMaxMotionVectorCountINTEL";
case spv::Op::OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL: return "SubgroupAvcImeSetUnidirectionalMixDisableINTEL";
case spv::Op::OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL: return "SubgroupAvcImeSetEarlySearchTerminationThresholdINTEL";
case spv::Op::OpSubgroupAvcImeSetWeightedSadINTEL: return "SubgroupAvcImeSetWeightedSadINTEL";
case spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL: return "SubgroupAvcImeEvaluateWithSingleReferenceINTEL";
case spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceINTEL: return "SubgroupAvcImeEvaluateWithDualReferenceINTEL";
case spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL: return "SubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL";
case spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL: return "SubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL";
case spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL: return "SubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL";
case spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL: return "SubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL";
case spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL: return "SubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL";
case spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL: return "SubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL";
case spv::Op::OpSubgroupAvcImeConvertToMceResultINTEL: return "SubgroupAvcImeConvertToMceResultINTEL";
case spv::Op::OpSubgroupAvcImeGetSingleReferenceStreaminINTEL: return "SubgroupAvcImeGetSingleReferenceStreaminINTEL";
case spv::Op::OpSubgroupAvcImeGetDualReferenceStreaminINTEL: return "SubgroupAvcImeGetDualReferenceStreaminINTEL";
case spv::Op::OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL: return "SubgroupAvcImeStripSingleReferenceStreamoutINTEL";
case spv::Op::OpSubgroupAvcImeStripDualReferenceStreamoutINTEL: return "SubgroupAvcImeStripDualReferenceStreamoutINTEL";
case spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL: return "SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL";
case spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL: return "SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL";
case spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL: return "SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL";
case spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL: return "SubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL";
case spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL: return "SubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL";
case spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL: return "SubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL";
case spv::Op::OpSubgroupAvcImeGetBorderReachedINTEL: return "SubgroupAvcImeGetBorderReachedINTEL";
case spv::Op::OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL: return "SubgroupAvcImeGetTruncatedSearchIndicationINTEL";
case spv::Op::OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL: return "SubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL";
case spv::Op::OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL: return "SubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL";
case spv::Op::OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL: return "SubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL";
case spv::Op::OpSubgroupAvcFmeInitializeINTEL: return "SubgroupAvcFmeInitializeINTEL";
case spv::Op::OpSubgroupAvcBmeInitializeINTEL: return "SubgroupAvcBmeInitializeINTEL";
case spv::Op::OpSubgroupAvcRefConvertToMcePayloadINTEL: return "SubgroupAvcRefConvertToMcePayloadINTEL";
case spv::Op::OpSubgroupAvcRefSetBidirectionalMixDisableINTEL: return "SubgroupAvcRefSetBidirectionalMixDisableINTEL";
case spv::Op::OpSubgroupAvcRefSetBilinearFilterEnableINTEL: return "SubgroupAvcRefSetBilinearFilterEnableINTEL";
case spv::Op::OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL: return "SubgroupAvcRefEvaluateWithSingleReferenceINTEL";
case spv::Op::OpSubgroupAvcRefEvaluateWithDualReferenceINTEL: return "SubgroupAvcRefEvaluateWithDualReferenceINTEL";
case spv::Op::OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL: return "SubgroupAvcRefEvaluateWithMultiReferenceINTEL";
case spv::Op::OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL: return "SubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL";
case spv::Op::OpSubgroupAvcRefConvertToMceResultINTEL: return "SubgroupAvcRefConvertToMceResultINTEL";
case spv::Op::OpSubgroupAvcSicInitializeINTEL: return "SubgroupAvcSicInitializeINTEL";
case spv::Op::OpSubgroupAvcSicConfigureSkcINTEL: return "SubgroupAvcSicConfigureSkcINTEL";
case spv::Op::OpSubgroupAvcSicConfigureIpeLumaINTEL: return "SubgroupAvcSicConfigureIpeLumaINTEL";
case spv::Op::OpSubgroupAvcSicConfigureIpeLumaChromaINTEL: return "SubgroupAvcSicConfigureIpeLumaChromaINTEL";
case spv::Op::OpSubgroupAvcSicGetMotionVectorMaskINTEL: return "SubgroupAvcSicGetMotionVectorMaskINTEL";
case spv::Op::OpSubgroupAvcSicConvertToMcePayloadINTEL: return "SubgroupAvcSicConvertToMcePayloadINTEL";
case spv::Op::OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL: return "SubgroupAvcSicSetIntraLumaShapePenaltyINTEL";
case spv::Op::OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL: return "SubgroupAvcSicSetIntraLumaModeCostFunctionINTEL";
case spv::Op::OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL: return "SubgroupAvcSicSetIntraChromaModeCostFunctionINTEL";
case spv::Op::OpSubgroupAvcSicSetBilinearFilterEnableINTEL: return "SubgroupAvcSicSetBilinearFilterEnableINTEL";
case spv::Op::OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL: return "SubgroupAvcSicSetSkcForwardTransformEnableINTEL";
case spv::Op::OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL: return "SubgroupAvcSicSetBlockBasedRawSkipSadINTEL";
case spv::Op::OpSubgroupAvcSicEvaluateIpeINTEL: return "SubgroupAvcSicEvaluateIpeINTEL";
case spv::Op::OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL: return "SubgroupAvcSicEvaluateWithSingleReferenceINTEL";
case spv::Op::OpSubgroupAvcSicEvaluateWithDualReferenceINTEL: return "SubgroupAvcSicEvaluateWithDualReferenceINTEL";
case spv::Op::OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL: return "SubgroupAvcSicEvaluateWithMultiReferenceINTEL";
case spv::Op::OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL: return "SubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL";
case spv::Op::OpSubgroupAvcSicConvertToMceResultINTEL: return "SubgroupAvcSicConvertToMceResultINTEL";
case spv::Op::OpSubgroupAvcSicGetIpeLumaShapeINTEL: return "SubgroupAvcSicGetIpeLumaShapeINTEL";
case spv::Op::OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL: return "SubgroupAvcSicGetBestIpeLumaDistortionINTEL";
case spv::Op::OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL: return "SubgroupAvcSicGetBestIpeChromaDistortionINTEL";
case spv::Op::OpSubgroupAvcSicGetPackedIpeLumaModesINTEL: return "SubgroupAvcSicGetPackedIpeLumaModesINTEL";
case spv::Op::OpSubgroupAvcSicGetIpeChromaModeINTEL: return "SubgroupAvcSicGetIpeChromaModeINTEL";
case spv::Op::OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL: return "SubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL";
case spv::Op::OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL: return "SubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL";
case spv::Op::OpSubgroupAvcSicGetInterRawSadsINTEL: return "SubgroupAvcSicGetInterRawSadsINTEL";
case spv::Op::OpVariableLengthArrayINTEL: return "VariableLengthArrayINTEL";
case spv::Op::OpSaveMemoryINTEL: return "SaveMemoryINTEL";
case spv::Op::OpRestoreMemoryINTEL: return "RestoreMemoryINTEL";
case spv::Op::OpArbitraryFloatSinCosPiINTEL: return "ArbitraryFloatSinCosPiINTEL";
case spv::Op::OpArbitraryFloatCastINTEL: return "ArbitraryFloatCastINTEL";
case spv::Op::OpArbitraryFloatCastFromIntINTEL: return "ArbitraryFloatCastFromIntINTEL";
case spv::Op::OpArbitraryFloatCastToIntINTEL: return "ArbitraryFloatCastToIntINTEL";
case spv::Op::OpArbitraryFloatAddINTEL: return "ArbitraryFloatAddINTEL";
case spv::Op::OpArbitraryFloatSubINTEL: return "ArbitraryFloatSubINTEL";
case spv::Op::OpArbitraryFloatMulINTEL: return "ArbitraryFloatMulINTEL";
case spv::Op::OpArbitraryFloatDivINTEL: return "ArbitraryFloatDivINTEL";
case spv::Op::OpArbitraryFloatGTINTEL: return "ArbitraryFloatGTINTEL";
case spv::Op::OpArbitraryFloatGEINTEL: return "ArbitraryFloatGEINTEL";
case spv::Op::OpArbitraryFloatLTINTEL: return "ArbitraryFloatLTINTEL";
case spv::Op::OpArbitraryFloatLEINTEL: return "ArbitraryFloatLEINTEL";
case spv::Op::OpArbitraryFloatEQINTEL: return "ArbitraryFloatEQINTEL";
case spv::Op::OpArbitraryFloatRecipINTEL: return "ArbitraryFloatRecipINTEL";
case spv::Op::OpArbitraryFloatRSqrtINTEL: return "ArbitraryFloatRSqrtINTEL";
case spv::Op::OpArbitraryFloatCbrtINTEL: return "ArbitraryFloatCbrtINTEL";
case spv::Op::OpArbitraryFloatHypotINTEL: return "ArbitraryFloatHypotINTEL";
case spv::Op::OpArbitraryFloatSqrtINTEL: return "ArbitraryFloatSqrtINTEL";
case spv::Op::OpArbitraryFloatLogINTEL: return "ArbitraryFloatLogINTEL";
case spv::Op::OpArbitraryFloatLog2INTEL: return "ArbitraryFloatLog2INTEL";
case spv::Op::OpArbitraryFloatLog10INTEL: return "ArbitraryFloatLog10INTEL";
case spv::Op::OpArbitraryFloatLog1pINTEL: return "ArbitraryFloatLog1pINTEL";
case spv::Op::OpArbitraryFloatExpINTEL: return "ArbitraryFloatExpINTEL";
case spv::Op::OpArbitraryFloatExp2INTEL: return "ArbitraryFloatExp2INTEL";
case spv::Op::OpArbitraryFloatExp10INTEL: return "ArbitraryFloatExp10INTEL";
case spv::Op::OpArbitraryFloatExpm1INTEL: return "ArbitraryFloatExpm1INTEL";
case spv::Op::OpArbitraryFloatSinINTEL: return "ArbitraryFloatSinINTEL";
case spv::Op::OpArbitraryFloatCosINTEL: return "ArbitraryFloatCosINTEL";
case spv::Op::OpArbitraryFloatSinCosINTEL: return "ArbitraryFloatSinCosINTEL";
case spv::Op::OpArbitraryFloatSinPiINTEL: return "ArbitraryFloatSinPiINTEL";
case spv::Op::OpArbitraryFloatCosPiINTEL: return "ArbitraryFloatCosPiINTEL";
case spv::Op::OpArbitraryFloatASinINTEL: return "ArbitraryFloatASinINTEL";
case spv::Op::OpArbitraryFloatASinPiINTEL: return "ArbitraryFloatASinPiINTEL";
case spv::Op::OpArbitraryFloatACosINTEL: return "ArbitraryFloatACosINTEL";
case spv::Op::OpArbitraryFloatACosPiINTEL: return "ArbitraryFloatACosPiINTEL";
case spv::Op::OpArbitraryFloatATanINTEL: return "ArbitraryFloatATanINTEL";
case spv::Op::OpArbitraryFloatATanPiINTEL: return "ArbitraryFloatATanPiINTEL";
case spv::Op::OpArbitraryFloatATan2INTEL: return "ArbitraryFloatATan2INTEL";
case spv::Op::OpArbitraryFloatPowINTEL: return "ArbitraryFloatPowINTEL";
case spv::Op::OpArbitraryFloatPowRINTEL: return "ArbitraryFloatPowRINTEL";
case spv::Op::OpArbitraryFloatPowNINTEL: return "ArbitraryFloatPowNINTEL";
case spv::Op::OpLoopControlINTEL: return "LoopControlINTEL";
case spv::Op::OpFixedSqrtINTEL: return "FixedSqrtINTEL";
case spv::Op::OpFixedRecipINTEL: return "FixedRecipINTEL";
case spv::Op::OpFixedRsqrtINTEL: return "FixedRsqrtINTEL";
case spv::Op::OpFixedSinINTEL: return "FixedSinINTEL";
case spv::Op::OpFixedCosINTEL: return "FixedCosINTEL";
case spv::Op::OpFixedSinCosINTEL: return "FixedSinCosINTEL";
case spv::Op::OpFixedSinPiINTEL: return "FixedSinPiINTEL";
case spv::Op::OpFixedCosPiINTEL: return "FixedCosPiINTEL";
case spv::Op::OpFixedSinCosPiINTEL: return "FixedSinCosPiINTEL";
case spv::Op::OpFixedLogINTEL: return "FixedLogINTEL";
case spv::Op::OpFixedExpINTEL: return "FixedExpINTEL";
case spv::Op::OpPtrCastToCrossWorkgroupINTEL: return "PtrCastToCrossWorkgroupINTEL";
case spv::Op::OpCrossWorkgroupCastToPtrINTEL: return "CrossWorkgroupCastToPtrINTEL";
case spv::Op::OpReadPipeBlockingINTEL: return "ReadPipeBlockingINTEL";
case spv::Op::OpWritePipeBlockingINTEL: return "WritePipeBlockingINTEL";
case spv::Op::OpFPGARegINTEL: return "FPGARegINTEL";
case spv::Op::OpRayQueryGetRayTMinKHR: return "RayQueryGetRayTMinKHR";
case spv::Op::OpRayQueryGetRayFlagsKHR: return "RayQueryGetRayFlagsKHR";
case spv::Op::OpRayQueryGetIntersectionTKHR: return "RayQueryGetIntersectionTKHR";
case spv::Op::OpRayQueryGetIntersectionInstanceCustomIndexKHR: return "RayQueryGetIntersectionInstanceCustomIndexKHR";
case spv::Op::OpRayQueryGetIntersectionInstanceIdKHR: return "RayQueryGetIntersectionInstanceIdKHR";
case spv::Op::OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR: return "RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR";
case spv::Op::OpRayQueryGetIntersectionGeometryIndexKHR: return "RayQueryGetIntersectionGeometryIndexKHR";
case spv::Op::OpRayQueryGetIntersectionPrimitiveIndexKHR: return "RayQueryGetIntersectionPrimitiveIndexKHR";
case spv::Op::OpRayQueryGetIntersectionBarycentricsKHR: return "RayQueryGetIntersectionBarycentricsKHR";
case spv::Op::OpRayQueryGetIntersectionFrontFaceKHR: return "RayQueryGetIntersectionFrontFaceKHR";
case spv::Op::OpRayQueryGetIntersectionCandidateAABBOpaqueKHR: return "RayQueryGetIntersectionCandidateAABBOpaqueKHR";
case spv::Op::OpRayQueryGetIntersectionObjectRayDirectionKHR: return "RayQueryGetIntersectionObjectRayDirectionKHR";
case spv::Op::OpRayQueryGetIntersectionObjectRayOriginKHR: return "RayQueryGetIntersectionObjectRayOriginKHR";
case spv::Op::OpRayQueryGetWorldRayDirectionKHR: return "RayQueryGetWorldRayDirectionKHR";
case spv::Op::OpRayQueryGetWorldRayOriginKHR: return "RayQueryGetWorldRayOriginKHR";
case spv::Op::OpRayQueryGetIntersectionObjectToWorldKHR: return "RayQueryGetIntersectionObjectToWorldKHR";
case spv::Op::OpRayQueryGetIntersectionWorldToObjectKHR: return "RayQueryGetIntersectionWorldToObjectKHR";
case spv::Op::OpAtomicFAddEXT: return "AtomicFAddEXT";
case spv::Op::OpTypeBufferSurfaceINTEL: return "TypeBufferSurfaceINTEL";
case spv::Op::OpTypeStructContinuedINTEL: return "TypeStructContinuedINTEL";
case spv::Op::OpConstantCompositeContinuedINTEL: return "ConstantCompositeContinuedINTEL";
case spv::Op::OpSpecConstantCompositeContinuedINTEL: return "SpecConstantCompositeContinuedINTEL";
default: return nullptr;
}
}
} // namespace tinyspv
